// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: You probably want to change this to another database later on
  provider = "mongodb"
  // This value is read from the .env file.
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String? @default("")
  image     String? @default("")
  published Boolean @default(true)

  author   User?   @relation(fields: [authorId], references: [authId])
  authorId String?
  Feed     Feed?   @relation(fields: [feedId], references: [id])
  feedId   String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likedBy    User[]   @relation("UserLikes", fields: [likedByIDs], references: [id])
  likedByIDs String[] @default([]) @db.ObjectId
}

model User {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  authId String @unique
  Post   Post[]

  SpacesOwned    Space[]  @relation("UserOwns")
  spacesOwnedIds String[] @default([]) @db.ObjectId

  SpacesFollowed    Space[]  @relation("UserFollows", fields: [spacesFollowedIds], references: [id])
  spacesFollowedIds String[] @default([]) @db.ObjectId

  FeedsFollowed    Feed[]   @relation("UserFollows", fields: [feedsFollowedIds], references: [id])
  feedsFollowedIds String[] @default([]) @db.ObjectId

  FeedsOwned Feed[]

  PostLikes   Post[]   @relation("UserLikes", fields: [postLikesIds], references: [id])
  postLikesIds String[] @default([]) @db.ObjectId
}

model Feed {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  owner   User?   @relation(fields: [ownerId], references: [authId])
  ownerId String?

  followers    User[]   @relation("UserFollows", fields: [followersIds], references: [id])
  followersIds String[] @default([]) @db.ObjectId

  Posts      Post[]
  visibility String  @default("public")

  Space      Space?  @relation(fields: [spaceId], references: [id])
  spaceId    String? @db.ObjectId

  icon   String? @default("")
  banner String? @default("")
}

model Space {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String? @default("")
  owner   User?   @relation("UserOwns", fields: [ownerId], references: [authId])
  ownerId String?

  followers    User[]   @relation("UserFollows", fields: [followersIds], references: [id])
  followersIds String[] @default([]) @db.ObjectId

  Feeds      Feed[]
  visibility String @default("public")
}

// model User {
//   id    String @id @default(auto()) @map("_id") @db.ObjectId
//   authId String @unique
//   Post  Post[] @relation("PostAuthor")

//   PostLikesIds String[] @default([]) @db.ObjectId
//   PostLikes    Post[]   @relation("UserLikes", fields: [PostLikesIds], references: [id])

//   Comment Comment[]
//   FeedsOwned Feed[]  @relation("FieldsOwned")
//   feedId     String? @db.ObjectId
// }

// model Feed {
//   id      String  @id @default(auto()) @map("_id") @db.ObjectId
//   name    String? @default("")
//   owner   User?   @relation("FieldsOwned", fields: [ownerId], references: [authId])
//   ownerId String?

//   Post       Post[]
//   visibility String @default("public")
// }

// model Post {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId

//   content   String? @default("")
//   image     String? @default("")
//   published Boolean @default(true)

//   author   User?   @relation("PostAuthor", fields: [authorId], references: [authId])
//   authorId String? 

//   Comment Comment[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   likedBy    User[]   @relation("UserLikes", fields: [likedByIDs], references: [id])
//   likedByIDs String[] @default([]) @db.ObjectId

//   likesCount Int      @default(0)
//   Feed   Feed   @relation(fields: [feedId], references: [id])
//   feedId String @db.ObjectId
// }

// model Comment {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   content   String?  @default("")
//   author    User?    @relation(fields: [authorId], references: [authId])
//   authorId  String 
//   post      Post?    @relation(fields: [postId], references: [id])
//   postId    String   @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
