// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // NOTE: You probably want to change this to another database later on
  provider = "mongodb"

  // This value is read from the .env file.
  url = env("DATABASE_URL")
}

model Example {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  details String
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  name         String
  Post         Post[]   @relation("PostAuthor")
  PostLikes    Post[]   @relation("UserLikes", fields: [PostLikesIds], references: [id])
  PostLikesIds String[] @db.ObjectId

  Comment Comment[]

  followedFeedsIds String[] @db.ObjectId
  FollowedFeeds    Feed[]   @relation("FieldsFollowed", fields: [followedFeedsIds], references: [id])

  FeedsOwned Feed[] @relation("FieldsOwned")
}

model Feed {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  owner   User?  @relation("FieldsOwned", fields: [ownerId], references: [id])
  ownerId String @db.ObjectId

  followersIds String[] @db.ObjectId
  followers    User[]   @relation("FieldsFollowed", fields: [followersIds], references: [id])

  Post       Post[]
  visibility String @default("public")
}

model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  image     String? @default("")
  published Boolean @default(true)

  author   User?   @relation("PostAuthor", fields: [authorId], references: [id])
  authorId String? @db.ObjectId

  Comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likedBy    User[]   @relation("UserLikes", fields: [likedByIDs], references: [id])
  likedByIDs String[] @default([]) @db.ObjectId
  likesCount Int      @default(0)

  Feed   Feed?   @relation(fields: [feedId], references: [id])
  feedId String? @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
